openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:3001
  description: Generated server url
paths:
  /users/{userId}:
    get:
      tags:
      - user-controller
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - user-controller
      operationId: getUserByIdAndUpdate
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
      - user-controller
      operationId: getUserByIdAndDelete
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /users/me:
    get:
      tags:
      - user-controller
      operationId: getProfile
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
      - user-controller
      operationId: getMeAndUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
      - user-controller
      operationId: getMeAnDelete
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
  /tickets/{id}:
    get:
      tags:
      - ticket-controller
      operationId: getTicketById
      parameters: []
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Ticket'
    put:
      tags:
      - ticket-controller
      operationId: getTicketByIdAndUpdate
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Ticket'
    delete:
      tags:
      - ticket-controller
      operationId: getTicketByIdAndDelete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /locations/{uuid}:
    get:
      tags:
      - location-controller
      operationId: getLocationById
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
    put:
      tags:
      - location-controller
      operationId: getLocationByIdAndUpdate
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
    delete:
      tags:
      - location-controller
      operationId: getLocationByIdAndDelete
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /exhibitions/{uuid}:
    get:
      tags:
      - exhibition-controller
      operationId: getExhibitionById
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Exhibition'
    put:
      tags:
      - exhibition-controller
      operationId: getExhibitionByIdAndUpdate
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExhibitionDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Exhibition'
    delete:
      tags:
      - exhibition-controller
      operationId: getExhibitionByIdAndDelete
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /events/{uuid}:
    get:
      tags:
      - event-controller
      operationId: getEventById
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Event'
    put:
      tags:
      - event-controller
      operationId: getEventByIdAndUpdate
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Event'
    delete:
      tags:
      - event-controller
      operationId: getEventByIdAndDelete
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /comments/md/{uuid}:
    put:
      tags:
      - comment-controller
      operationId: getCommentByIdAndUpdate
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentPutDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
  /blogs/{uuid}:
    get:
      tags:
      - blog-controller
      operationId: getBlogById
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Blog'
    put:
      tags:
      - blog-controller
      operationId: getBlogByIdAndUpdate
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Blog'
    delete:
      tags:
      - blog-controller
      operationId: getBlogByIdAndDelete
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /artists/{uuid}:
    get:
      tags:
      - artist-controller
      operationId: getArtistById
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Artist'
    put:
      tags:
      - artist-controller
      operationId: getArtistByIdAndUpdate
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Artist'
    delete:
      tags:
      - artist-controller
      operationId: getArtistByIdAndDelete
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /artist-work/{uuid}:
    get:
      tags:
      - artist-work-controller
      operationId: getArtistWorkById
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ArtistWork'
    put:
      tags:
      - artist-work-controller
      operationId: getArtistWorkByIdAndUpdate
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistWorkDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ArtistWork'
    delete:
      tags:
      - artist-work-controller
      operationId: getArtistWorkByIdAndDelete
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /v1/create-checkout-session:
    post:
      tags:
      - checkout-controller
      operationId: createCheckoutSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequestDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
  /v1/accounts:
    post:
      tags:
      - checkout-controller
      operationId: createAccount
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Account'
  /v1/account_sessions:
    post:
      tags:
      - checkout-controller
      operationId: createAccountSession
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
  /users/{uuid}/avatar:
    post:
      tags:
      - user-controller
      operationId: uploadExample
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              required:
              - avatar
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /tickets:
    get:
      tags:
      - ticket-controller
      operationId: getTicket
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTicket'
    post:
      tags:
      - ticket-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TicketResponseDTO'
  /locations:
    get:
      tags:
      - location-controller
      operationId: getLocation
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageLocation'
    post:
      tags:
      - location-controller
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LocationResponseDTO'
  /locations/user:
    post:
      tags:
      - location-controller
      operationId: createLocationUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationPostDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
  /gallery:
    get:
      tags:
      - gallery-controller
      operationId: getGalleries
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageGallery'
    post:
      tags:
      - gallery-controller
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GalleryDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GalleryResponseDTO'
  /exhibitions:
    post:
      tags:
      - exhibition-controller
      operationId: create_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExhibitionDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ExhibitionResponseDTO'
  /exhibitions/{uuid}/image:
    post:
      tags:
      - exhibition-controller
      operationId: uploadExample_1
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /events:
    get:
      tags:
      - event-controller
      operationId: getEvent
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageEvent'
    post:
      tags:
      - event-controller
      operationId: create_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/EventResponseDTO'
  /events/{uuid}/image:
    post:
      tags:
      - event-controller
      operationId: uploadExample_2
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /comments:
    get:
      tags:
      - comment-controller
      operationId: getComment
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageComment'
    post:
      tags:
      - comment-controller
      operationId: create_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CommentResponseDTO'
  /blogs:
    get:
      tags:
      - blog-controller
      operationId: getBlog
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageBlog'
    post:
      tags:
      - blog-controller
      operationId: create_6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/BlogResponseDTO'
  /blogs/{uuid}/image:
    post:
      tags:
      - blog-controller
      operationId: uploadExample_3
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
  /auth/register:
    post:
      tags:
      - auth-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
  /auth/registerCurator:
    post:
      tags:
      - auth-controller
      operationId: createUserCurator
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserResponseDTO'
  /auth/login:
    post:
      tags:
      - auth-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginResponseDTO'
  /artists:
    get:
      tags:
      - artist-controller
      operationId: getArtist
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 15
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageArtist'
    post:
      tags:
      - artist-controller
      operationId: create_7
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ArtistResponseDTO'
  /artists/{uuid}/image:
    post:
      tags:
      - artist-controller
      operationId: uploadExample_4
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /artist-work:
    get:
      tags:
      - artist-work-controller
      operationId: getArtistWork
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageArtistWork'
    post:
      tags:
      - artist-work-controller
      operationId: create_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistWorkDTO'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "201":
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ArtistWorkResponseDTO'
  /artist-work/{uuid}/image:
    post:
      tags:
      - artist-work-controller
      operationId: uploadExample_5
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
  /users:
    get:
      tags:
      - user-controller
      operationId: getUsers
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageUser'
  /locations/user/{uuid}:
    get:
      tags:
      - location-controller
      operationId: getLocationByUserId
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
    delete:
      tags:
      - location-controller
      operationId: getLocationUserByIdAndDelete
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /locations/exhibition/{uuid}:
    get:
      tags:
      - location-controller
      operationId: getLocationByExhibitionId
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Location'
  /gallery/{uuid}:
    get:
      tags:
      - gallery-controller
      operationId: getGalleryById
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Gallery'
    delete:
      tags:
      - gallery-controller
      operationId: getGalleryByIdAndDelete
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /gallery/artist/{artistId}:
    get:
      tags:
      - gallery-controller
      operationId: getGalleryIdByArtistId
      parameters:
      - name: artistId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GalleryResponseDTO'
  /exhibitions/all:
    get:
      tags:
      - exhibition-controller
      operationId: getExhibition
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageExhibition'
  /comments/{uuid}:
    get:
      tags:
      - comment-controller
      operationId: getCommentById
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      tags:
      - comment-controller
      operationId: getCommentByIdAndDelete
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "204":
          description: No Content
  /comments/blog/{idBlog}:
    get:
      tags:
      - comment-controller
      operationId: getCommentByBlog
      parameters:
      - name: idBlog
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageComment'
  /artist-work/dateWork/{dateWork}:
    get:
      tags:
      - artist-work-controller
      operationId: getArtistWorkByDateStarts
      parameters:
      - name: dateWork
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageArtistWork'
  /artist-work/artist/{artistId}:
    get:
      tags:
      - artist-work-controller
      operationId: getArtistWorkByGalleryArtistUuid
      parameters:
      - name: artistId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageArtistWork'
  /artist-work/artist/groupByYear/{galleryId}:
    get:
      tags:
      - artist-work-controller
      operationId: findArtistWorkByYearAndGallery
      parameters:
      - name: galleryId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: orderBy
        in: query
        required: false
        schema:
          type: string
          default: uuid
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "500":
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorPayload'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageArtistWork'
components:
  schemas:
    ErrorPayload:
      type: object
      properties:
        message:
          type: string
        timestamp:
          type: string
          format: date-time
    UserDTO:
      required:
      - email
      - name
      - password
      - surname
      type: object
      properties:
        email:
          type: string
        name:
          maxLength: 30
          minLength: 3
          type: string
        surname:
          maxLength: 30
          minLength: 3
          type: string
        password:
          maxLength: 30
          minLength: 3
          type: string
    User:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        email:
          type: string
        password:
          type: string
        avatar:
          type: string
        role:
          type: string
          enum:
          - USER
          - ADMIN
          - CURATOR
        accepted:
          type: boolean
        username:
          type: string
    TicketDTO:
      required:
      - date
      - total
      type: object
      properties:
        date:
          type: string
        event:
          type: string
          format: uuid
        exhibition:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        hour:
          type: string
        total:
          type: number
          format: double
    Event:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        image:
          type: array
          items:
            type: string
        date:
          type: string
          format: date
        typeEvent:
          type: string
          enum:
          - ONLINE
          - ON_SITE
        amount:
          type: number
          format: double
        maxNum:
          type: integer
          format: int64
    Exhibition:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        image:
          type: array
          items:
            type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        openHour:
          type: string
        amount:
          type: number
          format: double
    Ticket:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        total:
          type: number
          format: double
        date:
          type: string
        imageDoc:
          type: string
        hour:
          type: string
        typeTicket:
          type: string
          enum:
          - STANDARD
          - OVER_60
          - UNDER_7
          - STUDENTS
        exhibition:
          $ref: '#/components/schemas/Exhibition'
        event:
          $ref: '#/components/schemas/Event'
        user:
          $ref: '#/components/schemas/User'
    LocationDTO:
      required:
      - address
      - city
      - nameMuseum
      - nation
      - zipCode
      type: object
      properties:
        address:
          type: string
        city:
          type: string
        zipCode:
          type: integer
          format: int32
        nation:
          type: string
        nameMuseum:
          type: string
        artistWork:
          type: string
          format: uuid
        exhibition:
          type: string
          format: uuid
    Location:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        address:
          type: string
        city:
          type: string
        zipCode:
          type: integer
          format: int32
        nation:
          type: string
        museumName:
          type: string
    ExhibitionDTO:
      required:
      - amount
      - description
      - endDate
      - openHour
      - startDate
      - title
      type: object
      properties:
        startDate:
          type: string
          format: date
        description:
          type: string
        title:
          maxLength: 70
          minLength: 3
          type: string
        endDate:
          type: string
          format: date
        openHour:
          type: string
        amount:
          type: number
          format: double
        artistWork:
          type: string
          format: uuid
    EventDTO:
      required:
      - date
      - description
      - title
      - typeEvent
      type: object
      properties:
        date:
          type: string
          format: date
        description:
          type: string
        title:
          maxLength: 60
          minLength: 3
          type: string
        typeEvent:
          type: string
          enum:
          - ONLINE
          - ON_SITE
        amount:
          type: number
          format: double
    CommentPutDTO:
      required:
      - rate
      - text
      type: object
      properties:
        rate:
          type: integer
          format: int32
        text:
          type: string
    Comment:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        rate:
          type: integer
          format: int32
        text:
          type: string
        user:
          $ref: '#/components/schemas/User'
    BlogDTO:
      required:
      - author
      - date
      - description
      - title
      type: object
      properties:
        author:
          maxLength: 30
          minLength: 3
          type: string
        date:
          type: string
          format: date
        description:
          type: string
        title:
          maxLength: 60
          minLength: 3
          type: string
    Blog:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        image:
          type: array
          items:
            type: string
        author:
          type: string
        quote:
          type: string
        date:
          type: string
          format: date
    ArtistDTO:
      required:
      - birthDate
      - historyArtist
      - name
      - quote
      - surname
      type: object
      properties:
        name:
          maxLength: 30
          minLength: 3
          type: string
        surname:
          maxLength: 30
          minLength: 3
          type: string
        birthDate:
          type: string
          format: date
        dieDate:
          type: string
          format: date
        historyArtist:
          type: string
        quote:
          type: string
    Artist:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        surname:
          type: string
        birthDate:
          type: string
          format: date
        dieDate:
          type: string
          format: date
        historyArtist:
          type: string
        imageArtist:
          type: string
        quote:
          type: string
    ArtistWorkDTO:
      required:
      - description
      - nameWork
      - technique
      - yearStartWork
      type: object
      properties:
        nameWork:
          maxLength: 60
          minLength: 3
          type: string
        technique:
          maxLength: 80
          minLength: 3
          type: string
        yearStartWork:
          type: integer
          format: int64
        description:
          type: string
        galleryId:
          $ref: '#/components/schemas/Gallery'
        artistId:
          $ref: '#/components/schemas/Artist'
    Gallery:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    ArtistWork:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        nameWork:
          type: string
        yearStartWork:
          type: integer
          format: int64
        description:
          type: string
        technique:
          type: string
        image:
          type: string
        gallery:
          $ref: '#/components/schemas/Gallery'
        location:
          $ref: '#/components/schemas/Location'
    CheckoutRequestDTO:
      type: object
      properties:
        title:
          type: string
        image:
          type: string
        date:
          type: string
        amount:
          type: number
          format: double
        maxNum:
          type: integer
          format: int64
        hour:
          type: string
        typeTicket:
          type: object
          additionalProperties:
            type: integer
            format: int64
    Account:
      type: object
      properties:
        businessProfile:
          $ref: '#/components/schemas/BusinessProfile'
        businessType:
          type: string
        capabilities:
          $ref: '#/components/schemas/Capabilities'
        chargesEnabled:
          type: boolean
        company:
          $ref: '#/components/schemas/Company'
        controller:
          $ref: '#/components/schemas/Controller'
        country:
          type: string
        created:
          type: integer
          format: int64
        defaultCurrency:
          type: string
        deleted:
          type: boolean
        detailsSubmitted:
          type: boolean
        email:
          type: string
        externalAccounts:
          $ref: '#/components/schemas/ExternalAccountCollection'
        futureRequirements:
          $ref: '#/components/schemas/FutureRequirements'
        id:
          type: string
        individual:
          $ref: '#/components/schemas/Person'
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        payoutsEnabled:
          type: boolean
        requirements:
          $ref: '#/components/schemas/Requirements'
        settings:
          $ref: '#/components/schemas/Settings'
        tosAcceptance:
          $ref: '#/components/schemas/TosAcceptance'
        type:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AchCreditTransfer:
      type: object
      properties:
        accountNumber:
          type: string
        bankName:
          type: string
        routingNumber:
          type: string
        swiftCode:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AchDebit:
      type: object
      properties:
        accountHolderType:
          type: string
        bankName:
          type: string
        country:
          type: string
        fingerprint:
          type: string
        last4:
          type: string
        routingNumber:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AcssDebit:
      type: object
      properties:
        mandateOptions:
          $ref: '#/components/schemas/MandateOptions'
        verificationMethod:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AddInvoiceItem:
      type: object
      properties:
        price:
          type: string
        quantity:
          type: integer
          format: int64
        taxRates:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        priceObject:
          $ref: '#/components/schemas/Price'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AdditionalTosAcceptances:
      type: object
      properties:
        account:
          $ref: '#/components/schemas/Account'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Address:
      type: object
      properties:
        city:
          type: string
        country:
          type: string
        line1:
          type: string
        line2:
          type: string
        postalCode:
          type: string
        state:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AddressKana:
      type: object
      properties:
        city:
          type: string
        country:
          type: string
        line1:
          type: string
        line2:
          type: string
        postalCode:
          type: string
        state:
          type: string
        town:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AddressKanji:
      type: object
      properties:
        city:
          type: string
        country:
          type: string
        line1:
          type: string
        line2:
          type: string
        postalCode:
          type: string
        state:
          type: string
        town:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Affirm:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AfterpayClearpay:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Alipay:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Alternative:
      type: object
      properties:
        alternativeFieldsDue:
          type: array
          items:
            type: string
        originalFieldsDue:
          type: array
          items:
            type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AmountDetails:
      type: object
      properties:
        tip:
          $ref: '#/components/schemas/Tip'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AnnualRevenue:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        currency:
          type: string
        fiscalYearEnd:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Application:
      type: object
      properties:
        deleted:
          type: boolean
        id:
          type: string
        name:
          type: string
        object:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    ApplicationFee:
      type: object
      properties:
        account:
          type: string
        amount:
          type: integer
          format: int64
        amountRefunded:
          type: integer
          format: int64
        application:
          type: string
        balanceTransaction:
          type: string
        charge:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        id:
          type: string
        livemode:
          type: boolean
        object:
          type: string
        originatingTransaction:
          type: string
        refunded:
          type: boolean
        refunds:
          $ref: '#/components/schemas/FeeRefundCollection'
        chargeObject:
          $ref: '#/components/schemas/Charge'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        applicationObject:
          $ref: '#/components/schemas/Application'
        accountObject:
          $ref: '#/components/schemas/Account'
        originatingTransactionObject:
          $ref: '#/components/schemas/Charge'
        balanceTransactionObject:
          $ref: '#/components/schemas/BalanceTransaction'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AppliesTo:
      type: object
      properties:
        products:
          type: array
          items:
            type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AuBankTransfer:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AuBecsDebit:
      type: object
      properties:
        bsbNumber:
          type: string
        fingerprint:
          type: string
        last4:
          type: string
        mandate:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AutomaticPaymentMethods:
      type: object
      properties:
        allowRedirects:
          type: string
        enabled:
          type: boolean
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    AutomaticTax:
      type: object
      properties:
        enabled:
          type: boolean
        liability:
          $ref: '#/components/schemas/Liability'
        status:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    BacsDebit:
      type: object
      properties:
        fingerprint:
          type: string
        last4:
          type: string
        mandate:
          type: string
        sortCode:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    BacsDebitPayments:
      type: object
      properties:
        displayName:
          type: string
        serviceUserNumber:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    BalanceTransaction:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        availableOn:
          type: integer
          format: int64
        created:
          type: integer
          format: int64
        currency:
          type: string
        description:
          type: string
        exchangeRate:
          type: number
        fee:
          type: integer
          format: int64
        feeDetails:
          type: array
          items:
            $ref: '#/components/schemas/FeeDetail'
        id:
          type: string
        net:
          type: integer
          format: int64
        object:
          type: string
        reportingCategory:
          type: string
        source:
          type: string
        status:
          type: string
        type:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        sourceObject:
          $ref: '#/components/schemas/BalanceTransactionSource'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    BalanceTransactionSource:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        id:
          type: string
    Bancontact:
      type: object
      properties:
        preferredLanguage:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    BankTransfer:
      type: object
      properties:
        euBankTransfer:
          $ref: '#/components/schemas/EuBankTransfer'
        type:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    BillingCycleAnchorConfig:
      type: object
      properties:
        dayOfMonth:
          type: integer
          format: int64
        hour:
          type: integer
          format: int64
        minute:
          type: integer
          format: int64
        month:
          type: integer
          format: int64
        second:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    BillingDetails:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        email:
          type: string
        name:
          type: string
        phone:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    BillingThresholds:
      type: object
      properties:
        usageGte:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Blik:
      type: object
      properties:
        reference:
          type: string
        referenceStatus:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Boleto:
      type: object
      properties:
        taxId:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    BrBankTransfer:
      type: object
      properties:
        reference:
          type: string
        referenceStatus:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Branding:
      type: object
      properties:
        icon:
          type: string
        logo:
          type: string
        primaryColor:
          type: string
        secondaryColor:
          type: string
        iconObject:
          $ref: '#/components/schemas/File'
        logoObject:
          $ref: '#/components/schemas/File'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Breakdown:
      type: object
      properties:
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/Tax'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    BusinessProfile:
      type: object
      properties:
        annualRevenue:
          $ref: '#/components/schemas/AnnualRevenue'
        estimatedWorkerCount:
          type: integer
          format: int64
        mcc:
          type: string
        monthlyEstimatedRevenue:
          $ref: '#/components/schemas/MonthlyEstimatedRevenue'
        name:
          type: string
        productDescription:
          type: string
        supportAddress:
          $ref: '#/components/schemas/Address'
        supportEmail:
          type: string
        supportPhone:
          type: string
        supportUrl:
          type: string
        url:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CancellationDetails:
      type: object
      properties:
        comment:
          type: string
        feedback:
          type: string
        reason:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Capabilities:
      type: object
      properties:
        acssDebitPayments:
          type: string
        affirmPayments:
          type: string
        afterpayClearpayPayments:
          type: string
        auBecsDebitPayments:
          type: string
        bacsDebitPayments:
          type: string
        bancontactPayments:
          type: string
        bankTransferPayments:
          type: string
        blikPayments:
          type: string
        boletoPayments:
          type: string
        cardIssuing:
          type: string
        cardPayments:
          type: string
        cartesBancairesPayments:
          type: string
        cashappPayments:
          type: string
        epsPayments:
          type: string
        fpxPayments:
          type: string
        giropayPayments:
          type: string
        grabpayPayments:
          type: string
        idealPayments:
          type: string
        indiaInternationalPayments:
          type: string
        jcbPayments:
          type: string
        klarnaPayments:
          type: string
        konbiniPayments:
          type: string
        legacyPayments:
          type: string
        linkPayments:
          type: string
        oxxoPayments:
          type: string
        p24Payments:
          type: string
        paynowPayments:
          type: string
        promptpayPayments:
          type: string
        revolutPayPayments:
          type: string
        sepaDebitPayments:
          type: string
        sofortPayments:
          type: string
        swishPayments:
          type: string
        taxReportingUs1099K:
          type: string
        taxReportingUs1099Misc:
          type: string
        transfers:
          type: string
        treasury:
          type: string
        usBankAccountAchPayments:
          type: string
        zipPayments:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Card:
      type: object
      properties:
        installments:
          $ref: '#/components/schemas/Installments'
        requestThreeDSecure:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CardIssuing:
      type: object
      properties:
        tosAcceptance:
          $ref: '#/components/schemas/TosAcceptance'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CardPayments:
      type: object
      properties:
        declineOn:
          $ref: '#/components/schemas/DeclineOn'
        statementDescriptorPrefix:
          type: string
        statementDescriptorPrefixKana:
          type: string
        statementDescriptorPrefixKanji:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CardPresent:
      type: object
      properties:
        amountAuthorized:
          type: integer
          format: int64
        brand:
          type: string
        captureBefore:
          type: integer
          format: int64
        cardholderName:
          type: string
        country:
          type: string
        description:
          type: string
        emvAuthData:
          type: string
        expMonth:
          type: integer
          format: int64
        expYear:
          type: integer
          format: int64
        fingerprint:
          type: string
        funding:
          type: string
        generatedCard:
          type: string
        iin:
          type: string
        incrementalAuthorizationSupported:
          type: boolean
        issuer:
          type: string
        last4:
          type: string
        network:
          type: string
        offline:
          $ref: '#/components/schemas/Offline'
        overcaptureSupported:
          type: boolean
        readMethod:
          type: string
        receipt:
          $ref: '#/components/schemas/Receipt'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CashBalance:
      type: object
      properties:
        available:
          type: object
          additionalProperties:
            type: integer
            format: int64
        customer:
          type: string
        livemode:
          type: boolean
        object:
          type: string
        settings:
          $ref: '#/components/schemas/Settings'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Cashapp:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Charge:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        amountCaptured:
          type: integer
          format: int64
        amountRefunded:
          type: integer
          format: int64
        application:
          type: string
        applicationFee:
          type: string
        applicationFeeAmount:
          type: integer
          format: int64
        authorizationCode:
          type: string
        balanceTransaction:
          type: string
        billingDetails:
          $ref: '#/components/schemas/BillingDetails'
        calculatedStatementDescriptor:
          type: string
        captured:
          type: boolean
        created:
          type: integer
          format: int64
        currency:
          type: string
        customer:
          type: string
        description:
          type: string
        disputed:
          type: boolean
        failureBalanceTransaction:
          type: string
        failureCode:
          type: string
        failureMessage:
          type: string
        fraudDetails:
          $ref: '#/components/schemas/FraudDetails'
        id:
          type: string
        invoice:
          type: string
        level3:
          $ref: '#/components/schemas/Level3'
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        onBehalfOf:
          type: string
        outcome:
          $ref: '#/components/schemas/Outcome'
        paid:
          type: boolean
        paymentIntent:
          type: string
        paymentMethod:
          type: string
        paymentMethodDetails:
          $ref: '#/components/schemas/PaymentMethodDetails'
        radarOptions:
          $ref: '#/components/schemas/RadarOptions'
        receiptEmail:
          type: string
        receiptNumber:
          type: string
        receiptUrl:
          type: string
        refunded:
          type: boolean
        refunds:
          $ref: '#/components/schemas/RefundCollection'
        review:
          type: string
        shipping:
          $ref: '#/components/schemas/ShippingDetails'
        source:
          $ref: '#/components/schemas/PaymentSource'
        sourceTransfer:
          type: string
        statementDescriptor:
          type: string
        statementDescriptorSuffix:
          type: string
        status:
          type: string
        transfer:
          type: string
        transferData:
          $ref: '#/components/schemas/TransferData'
        transferGroup:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        applicationObject:
          $ref: '#/components/schemas/Application'
        applicationFeeObject:
          $ref: '#/components/schemas/ApplicationFee'
        paymentIntentObject:
          $ref: '#/components/schemas/PaymentIntent'
        reviewObject:
          $ref: '#/components/schemas/Review'
        sourceTransferObject:
          $ref: '#/components/schemas/Transfer'
        transferObject:
          $ref: '#/components/schemas/Transfer'
        onBehalfOfObject:
          $ref: '#/components/schemas/Account'
        invoiceObject:
          $ref: '#/components/schemas/Invoice'
        balanceTransactionObject:
          $ref: '#/components/schemas/BalanceTransaction'
        failureBalanceTransactionObject:
          $ref: '#/components/schemas/BalanceTransaction'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Company:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        addressKana:
          $ref: '#/components/schemas/AddressKana'
        addressKanji:
          $ref: '#/components/schemas/AddressKanji'
        directorsProvided:
          type: boolean
        executivesProvided:
          type: boolean
        exportLicenseId:
          type: string
        exportPurposeCode:
          type: string
        name:
          type: string
        nameKana:
          type: string
        nameKanji:
          type: string
        ownersProvided:
          type: boolean
        ownershipDeclaration:
          $ref: '#/components/schemas/OwnershipDeclaration'
        phone:
          type: string
        structure:
          type: string
        taxIdProvided:
          type: boolean
        taxIdRegistrar:
          type: string
        vatIdProvided:
          type: boolean
        verification:
          $ref: '#/components/schemas/Verification'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Computed:
      type: object
      properties:
        recurring:
          $ref: '#/components/schemas/Recurring'
        upfront:
          $ref: '#/components/schemas/Upfront'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Controller:
      type: object
      properties:
        isController:
          type: boolean
        type:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Coupon:
      type: object
      properties:
        amountOff:
          type: integer
          format: int64
        appliesTo:
          $ref: '#/components/schemas/AppliesTo'
        created:
          type: integer
          format: int64
        currency:
          type: string
        currencyOptions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CurrencyOption'
        deleted:
          type: boolean
        duration:
          type: string
        durationInMonths:
          type: integer
          format: int64
        id:
          type: string
        livemode:
          type: boolean
        maxRedemptions:
          type: integer
          format: int64
        metadata:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        object:
          type: string
        percentOff:
          type: number
        redeemBy:
          type: integer
          format: int64
        timesRedeemed:
          type: integer
          format: int64
        valid:
          type: boolean
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CreditedItems:
      type: object
      properties:
        invoice:
          type: string
        invoiceLineItems:
          type: array
          items:
            type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CurrencyOption:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        taxBehavior:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CurrentPhase:
      type: object
      properties:
        endDate:
          type: integer
          format: int64
        startDate:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CustomField:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CustomUnitAmount:
      type: object
      properties:
        maximum:
          type: integer
          format: int64
        minimum:
          type: integer
          format: int64
        preset:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Customer:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        balance:
          type: integer
          format: int64
        cashBalance:
          $ref: '#/components/schemas/CashBalance'
        created:
          type: integer
          format: int64
        currency:
          type: string
        defaultSource:
          type: string
        deleted:
          type: boolean
        delinquent:
          type: boolean
        description:
          type: string
        discount:
          $ref: '#/components/schemas/Discount'
        email:
          type: string
        id:
          type: string
        invoiceCreditBalance:
          type: object
          additionalProperties:
            type: integer
            format: int64
        invoicePrefix:
          type: string
        invoiceSettings:
          $ref: '#/components/schemas/InvoiceSettings'
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        nextInvoiceSequence:
          type: integer
          format: int64
        object:
          type: string
        phone:
          type: string
        preferredLocales:
          type: array
          items:
            type: string
        shipping:
          $ref: '#/components/schemas/ShippingDetails'
        sources:
          $ref: '#/components/schemas/PaymentSourceCollection'
        subscriptions:
          $ref: '#/components/schemas/SubscriptionCollection'
        tax:
          $ref: '#/components/schemas/Tax'
        taxExempt:
          type: string
        taxIds:
          $ref: '#/components/schemas/TaxIdCollection'
        testClock:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        defaultSourceObject:
          $ref: '#/components/schemas/PaymentSource'
        testClockObject:
          $ref: '#/components/schemas/TestClock'
        testHelpers:
          $ref: '#/components/schemas/TestHelpers'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CustomerAcceptance:
      type: object
      properties:
        acceptedAt:
          type: integer
          format: int64
        offline:
          $ref: '#/components/schemas/Offline'
        online:
          $ref: '#/components/schemas/Online'
        type:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CustomerBalance:
      type: object
      properties:
        bankTransfer:
          $ref: '#/components/schemas/BankTransfer'
        fundingType:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CustomerCashBalance:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    CustomerTaxId:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Dashboard:
      type: object
      properties:
        displayName:
          type: string
        timezone:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    DeclineOn:
      type: object
      properties:
        avsFailure:
          type: boolean
        cvcFailure:
          type: boolean
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    DefaultSettings:
      type: object
      properties:
        applicationFeePercent:
          type: number
        automaticTax:
          $ref: '#/components/schemas/AutomaticTax'
        billingCycleAnchor:
          type: string
        billingThresholds:
          $ref: '#/components/schemas/BillingThresholds'
        collectionMethod:
          type: string
        defaultPaymentMethod:
          type: string
        description:
          type: string
        invoiceSettings:
          $ref: '#/components/schemas/InvoiceSettings'
        onBehalfOf:
          type: string
        transferData:
          $ref: '#/components/schemas/TransferData'
        onBehalfOfObject:
          $ref: '#/components/schemas/Account'
        defaultPaymentMethodObject:
          $ref: '#/components/schemas/PaymentMethod'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    DeliveryEstimate:
      type: object
      properties:
        maximum:
          $ref: '#/components/schemas/Maximum'
        minimum:
          $ref: '#/components/schemas/Minimum'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    DestinationDetails:
      type: object
      properties:
        affirm:
          $ref: '#/components/schemas/Affirm'
        afterpayClearpay:
          $ref: '#/components/schemas/AfterpayClearpay'
        alipay:
          $ref: '#/components/schemas/Alipay'
        auBankTransfer:
          $ref: '#/components/schemas/AuBankTransfer'
        blik:
          $ref: '#/components/schemas/Blik'
        brBankTransfer:
          $ref: '#/components/schemas/BrBankTransfer'
        card:
          $ref: '#/components/schemas/Card'
        cashapp:
          $ref: '#/components/schemas/Cashapp'
        customerCashBalance:
          $ref: '#/components/schemas/CustomerCashBalance'
        eps:
          $ref: '#/components/schemas/Eps'
        euBankTransfer:
          $ref: '#/components/schemas/EuBankTransfer'
        gbBankTransfer:
          $ref: '#/components/schemas/GbBankTransfer'
        giropay:
          $ref: '#/components/schemas/Giropay'
        grabpay:
          $ref: '#/components/schemas/Grabpay'
        jpBankTransfer:
          $ref: '#/components/schemas/JpBankTransfer'
        klarna:
          $ref: '#/components/schemas/Klarna'
        mxBankTransfer:
          $ref: '#/components/schemas/MxBankTransfer'
        p24:
          $ref: '#/components/schemas/P24'
        paynow:
          $ref: '#/components/schemas/Paynow'
        paypal:
          $ref: '#/components/schemas/Paypal'
        pix:
          $ref: '#/components/schemas/Pix'
        revolut:
          $ref: '#/components/schemas/Revolut'
        sofort:
          $ref: '#/components/schemas/Sofort'
        swish:
          $ref: '#/components/schemas/Swish'
        thBankTransfer:
          $ref: '#/components/schemas/ThBankTransfer'
        type:
          type: string
        usBankTransfer:
          $ref: '#/components/schemas/UsBankTransfer'
        wechatPay:
          $ref: '#/components/schemas/WechatPay'
        zip:
          $ref: '#/components/schemas/Zip'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Discount:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        discount:
          $ref: '#/components/schemas/Discount'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    DiscountAmount:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        discount:
          type: string
        discountObject:
          $ref: '#/components/schemas/Discount'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    DisplayDetails:
      type: object
      properties:
        emailSent:
          $ref: '#/components/schemas/EmailSent'
        expiresAt:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Dob:
      type: object
      properties:
        day:
          type: integer
          format: int64
        month:
          type: integer
          format: int64
        year:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    EmailSent:
      type: object
      properties:
        emailSentAt:
          type: integer
          format: int64
        emailSentTo:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    EndBehavior:
      type: object
      properties:
        missingPaymentMethod:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Eps:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Errors:
      type: object
      properties:
        code:
          type: string
        reason:
          type: string
        requirement:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    EuBankTransfer:
      type: object
      properties:
        country:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    ExternalAccount:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        id:
          type: string
    ExternalAccountCollection:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/ExternalAccount'
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Feature:
      type: object
      properties:
        name:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FeeDetail:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        application:
          type: string
        currency:
          type: string
        description:
          type: string
        type:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FeeRefund:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        balanceTransaction:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        fee:
          type: string
        id:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        feeObject:
          $ref: '#/components/schemas/ApplicationFee'
        balanceTransactionObject:
          $ref: '#/components/schemas/BalanceTransaction'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FeeRefundCollection:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/FeeRefund'
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    File:
      type: object
      properties:
        created:
          type: integer
          format: int64
        expiresAt:
          type: integer
          format: int64
        filename:
          type: string
        id:
          type: string
        links:
          $ref: '#/components/schemas/FileLinkCollection'
        object:
          type: string
        purpose:
          type: string
        size:
          type: integer
          format: int64
        title:
          type: string
        type:
          type: string
        url:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FileLink:
      type: object
      properties:
        created:
          type: integer
          format: int64
        expired:
          type: boolean
        expiresAt:
          type: integer
          format: int64
        file:
          type: string
        id:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        url:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        fileObject:
          $ref: '#/components/schemas/File'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FileLinkCollection:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/FileLink'
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FinancialConnections:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
        prefetch:
          type: array
          items:
            type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FixedAmount:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        currency:
          type: string
        currencyOptions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CurrencyOption'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Fpx:
      type: object
      properties:
        accountHolderType:
          type: string
        bank:
          type: string
        transactionId:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FraudDetails:
      type: object
      properties:
        stripeReport:
          type: string
        userReport:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FromInvoice:
      type: object
      properties:
        action:
          type: string
        invoice:
          type: string
        invoiceObject:
          $ref: '#/components/schemas/Invoice'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FromQuote:
      type: object
      properties:
        isRevision:
          type: boolean
        quote:
          type: string
        quoteObject:
          $ref: '#/components/schemas/Quote'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    FutureRequirements:
      type: object
      properties:
        alternatives:
          type: array
          items:
            $ref: '#/components/schemas/Alternative'
        currentlyDue:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Errors'
        eventuallyDue:
          type: array
          items:
            type: string
        pastDue:
          type: array
          items:
            type: string
        pendingVerification:
          type: array
          items:
            type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    GbBankTransfer:
      type: object
      properties:
        reference:
          type: string
        referenceStatus:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    GeneratedFrom:
      type: object
      properties:
        charge:
          type: string
        setupAttempt:
          type: string
        setupAttemptObject:
          $ref: '#/components/schemas/SetupAttempt'
        chargeObject:
          $ref: '#/components/schemas/Charge'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Giropay:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Grabpay:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Ideal:
      type: object
      properties:
        bank:
          type: string
        bic:
          type: string
        generatedSepaDebit:
          type: string
        generatedSepaDebitMandate:
          type: string
        ibanLast4:
          type: string
        verifiedName:
          type: string
        generatedSepaDebitObject:
          $ref: '#/components/schemas/PaymentMethod'
        generatedSepaDebitMandateObject:
          $ref: '#/components/schemas/Mandate'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Installments:
      type: object
      properties:
        enabled:
          type: boolean
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    InteracPresent:
      type: object
      properties:
        brand:
          type: string
        cardholderName:
          type: string
        country:
          type: string
        description:
          type: string
        emvAuthData:
          type: string
        expMonth:
          type: integer
          format: int64
        expYear:
          type: integer
          format: int64
        fingerprint:
          type: string
        funding:
          type: string
        generatedCard:
          type: string
        iin:
          type: string
        issuer:
          type: string
        last4:
          type: string
        network:
          type: string
        preferredLocales:
          type: array
          items:
            type: string
        readMethod:
          type: string
        receipt:
          $ref: '#/components/schemas/Receipt'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Invoice:
      type: object
      properties:
        accountCountry:
          type: string
        accountName:
          type: string
        accountTaxIds:
          type: array
          items:
            type: string
        amountDue:
          type: integer
          format: int64
        amountPaid:
          type: integer
          format: int64
        amountRemaining:
          type: integer
          format: int64
        amountShipping:
          type: integer
          format: int64
        application:
          type: string
        applicationFeeAmount:
          type: integer
          format: int64
        attemptCount:
          type: integer
          format: int64
        attempted:
          type: boolean
        autoAdvance:
          type: boolean
        automaticTax:
          $ref: '#/components/schemas/AutomaticTax'
        billingReason:
          type: string
        charge:
          type: string
        collectionMethod:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        customer:
          type: string
        customerAddress:
          $ref: '#/components/schemas/Address'
        customerEmail:
          type: string
        customerName:
          type: string
        customerPhone:
          type: string
        customerShipping:
          $ref: '#/components/schemas/ShippingDetails'
        customerTaxExempt:
          type: string
        customerTaxIds:
          type: array
          items:
            $ref: '#/components/schemas/CustomerTaxId'
        defaultPaymentMethod:
          type: string
        defaultSource:
          type: string
        defaultTaxRates:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        deleted:
          type: boolean
        description:
          type: string
        discount:
          $ref: '#/components/schemas/Discount'
        discounts:
          type: array
          items:
            type: string
        dueDate:
          type: integer
          format: int64
        effectiveAt:
          type: integer
          format: int64
        endingBalance:
          type: integer
          format: int64
        footer:
          type: string
        fromInvoice:
          $ref: '#/components/schemas/FromInvoice'
        hostedInvoiceUrl:
          type: string
        id:
          type: string
        invoicePdf:
          type: string
        issuer:
          $ref: '#/components/schemas/Issuer'
        lastFinalizationError:
          $ref: '#/components/schemas/StripeError'
        latestRevision:
          type: string
        lines:
          $ref: '#/components/schemas/InvoiceLineItemCollection'
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        nextPaymentAttempt:
          type: integer
          format: int64
        number:
          type: string
        object:
          type: string
        onBehalfOf:
          type: string
        paid:
          type: boolean
        paidOutOfBand:
          type: boolean
        paymentIntent:
          type: string
        paymentSettings:
          $ref: '#/components/schemas/PaymentSettings'
        periodEnd:
          type: integer
          format: int64
        periodStart:
          type: integer
          format: int64
        postPaymentCreditNotesAmount:
          type: integer
          format: int64
        prePaymentCreditNotesAmount:
          type: integer
          format: int64
        quote:
          type: string
        receiptNumber:
          type: string
        rendering:
          $ref: '#/components/schemas/Rendering'
        renderingOptions:
          $ref: '#/components/schemas/RenderingOptions'
        shippingCost:
          $ref: '#/components/schemas/ShippingCost'
        shippingDetails:
          $ref: '#/components/schemas/ShippingDetails'
        startingBalance:
          type: integer
          format: int64
        statementDescriptor:
          type: string
        status:
          type: string
        statusTransitions:
          $ref: '#/components/schemas/StatusTransitions'
        subscription:
          type: string
        subscriptionDetails:
          $ref: '#/components/schemas/SubscriptionDetails'
        subscriptionProrationDate:
          type: integer
          format: int64
        subtotal:
          type: integer
          format: int64
        subtotalExcludingTax:
          type: integer
          format: int64
        tax:
          type: integer
          format: int64
        testClock:
          type: string
        thresholdReason:
          $ref: '#/components/schemas/ThresholdReason'
        total:
          type: integer
          format: int64
        totalDiscountAmounts:
          type: array
          items:
            $ref: '#/components/schemas/TotalDiscountAmount'
        totalExcludingTax:
          type: integer
          format: int64
        totalTaxAmounts:
          type: array
          items:
            $ref: '#/components/schemas/TotalTaxAmount'
        transferData:
          $ref: '#/components/schemas/TransferData'
        webhooksDeliveredAt:
          type: integer
          format: int64
        chargeObject:
          $ref: '#/components/schemas/Charge'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        applicationObject:
          $ref: '#/components/schemas/Application'
        defaultSourceObject:
          $ref: '#/components/schemas/PaymentSource'
        testClockObject:
          $ref: '#/components/schemas/TestClock'
        paymentIntentObject:
          $ref: '#/components/schemas/PaymentIntent'
        onBehalfOfObject:
          $ref: '#/components/schemas/Account'
        latestRevisionObject:
          $ref: '#/components/schemas/Invoice'
        quoteObject:
          $ref: '#/components/schemas/Quote'
        subscriptionObject:
          $ref: '#/components/schemas/Subscription'
        discountObjects:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        defaultPaymentMethodObject:
          $ref: '#/components/schemas/PaymentMethod'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    InvoiceItem:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        currency:
          type: string
        customer:
          type: string
        date:
          type: integer
          format: int64
        deleted:
          type: boolean
        description:
          type: string
        discountable:
          type: boolean
        discounts:
          type: array
          items:
            type: string
        id:
          type: string
        invoice:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        period:
          $ref: '#/components/schemas/Period'
        plan:
          $ref: '#/components/schemas/Plan'
        price:
          $ref: '#/components/schemas/Price'
        proration:
          type: boolean
        quantity:
          type: integer
          format: int64
        subscription:
          type: string
        subscriptionItem:
          type: string
        taxRates:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        testClock:
          type: string
        unitAmount:
          type: integer
          format: int64
        unitAmountDecimal:
          type: number
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        testClockObject:
          $ref: '#/components/schemas/TestClock'
        invoiceObject:
          $ref: '#/components/schemas/Invoice'
        subscriptionObject:
          $ref: '#/components/schemas/Subscription'
        discountObjects:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    InvoiceLineItem:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        amountExcludingTax:
          type: integer
          format: int64
        currency:
          type: string
        description:
          type: string
        discountAmounts:
          type: array
          items:
            $ref: '#/components/schemas/DiscountAmount'
        discountable:
          type: boolean
        discounts:
          type: array
          items:
            type: string
        id:
          type: string
        invoice:
          type: string
        invoiceItem:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        period:
          $ref: '#/components/schemas/Period'
        plan:
          $ref: '#/components/schemas/Plan'
        price:
          $ref: '#/components/schemas/Price'
        proration:
          type: boolean
        prorationDetails:
          $ref: '#/components/schemas/ProrationDetails'
        quantity:
          type: integer
          format: int64
        subscription:
          type: string
        subscriptionItem:
          type: string
        taxAmounts:
          type: array
          items:
            $ref: '#/components/schemas/TaxAmount'
        taxRates:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        type:
          type: string
        unitAmountExcludingTax:
          type: number
        invoiceItemObject:
          $ref: '#/components/schemas/InvoiceItem'
        subscriptionItemObject:
          $ref: '#/components/schemas/SubscriptionItem'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        subscriptionObject:
          $ref: '#/components/schemas/Subscription'
        discountObjects:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    InvoiceLineItemCollection:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/InvoiceLineItem'
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    InvoiceSettings:
      type: object
      properties:
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        defaultPaymentMethod:
          type: string
        footer:
          type: string
        renderingOptions:
          $ref: '#/components/schemas/RenderingOptions'
        defaultPaymentMethodObject:
          $ref: '#/components/schemas/PaymentMethod'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Invoices:
      type: object
      properties:
        defaultAccountTaxIds:
          type: array
          items:
            type: string
        defaultAccountTaxIdObjects:
          type: array
          items:
            $ref: '#/components/schemas/TaxId'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    IpAddressLocation:
      type: object
      properties:
        city:
          type: string
        country:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        region:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Issuer:
      type: object
      properties:
        account:
          type: string
        type:
          type: string
        accountObject:
          $ref: '#/components/schemas/Account'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Item:
      type: object
      properties:
        billingThresholds:
          $ref: '#/components/schemas/BillingThresholds'
        metadata:
          type: object
          additionalProperties:
            type: string
        plan:
          type: string
        price:
          type: string
        quantity:
          type: integer
          format: int64
        taxRates:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        planObject:
          $ref: '#/components/schemas/Plan'
        priceObject:
          $ref: '#/components/schemas/Price'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    ItemReason:
      type: object
      properties:
        lineItemIds:
          type: array
          items:
            type: string
        usageGte:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    JpBankTransfer:
      type: object
      properties:
        reference:
          type: string
        referenceStatus:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    JsonArray:
      type: object
      properties:
        empty:
          type: boolean
        asBoolean:
          type: boolean
        asDouble:
          type: number
          format: double
        asString:
          type: string
        asNumber:
          type: number
        asCharacter:
          type: string
          deprecated: true
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asInt:
          type: integer
          format: int32
        asLong:
          type: integer
          format: int64
        asFloat:
          type: number
          format: float
        asByte:
          type: string
          format: byte
        asShort:
          type: integer
          format: int32
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        asJsonArray:
          $ref: '#/components/schemas/JsonArray'
        asJsonPrimitive:
          $ref: '#/components/schemas/JsonPrimitive'
        asJsonObject:
          $ref: '#/components/schemas/JsonObject'
        asJsonNull:
          $ref: '#/components/schemas/JsonNull'
        jsonNull:
          type: boolean
    JsonNull:
      type: object
      properties:
        asBoolean:
          type: boolean
        asDouble:
          type: number
          format: double
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        asJsonArray:
          $ref: '#/components/schemas/JsonArray'
        asJsonPrimitive:
          $ref: '#/components/schemas/JsonPrimitive'
        asJsonObject:
          $ref: '#/components/schemas/JsonObject'
        asString:
          type: string
        asJsonNull:
          $ref: '#/components/schemas/JsonNull'
        asNumber:
          type: number
        asCharacter:
          type: string
          deprecated: true
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asInt:
          type: integer
          format: int32
        asLong:
          type: integer
          format: int64
        asFloat:
          type: number
          format: float
        asByte:
          type: string
          format: byte
        asShort:
          type: integer
          format: int32
        jsonNull:
          type: boolean
    JsonObject:
      type: object
      properties:
        empty:
          type: boolean
        asBoolean:
          type: boolean
        asDouble:
          type: number
          format: double
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        asJsonArray:
          $ref: '#/components/schemas/JsonArray'
        asJsonPrimitive:
          $ref: '#/components/schemas/JsonPrimitive'
        asJsonObject:
          $ref: '#/components/schemas/JsonObject'
        asString:
          type: string
        asJsonNull:
          $ref: '#/components/schemas/JsonNull'
        asNumber:
          type: number
        asCharacter:
          type: string
          deprecated: true
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        asInt:
          type: integer
          format: int32
        asLong:
          type: integer
          format: int64
        asFloat:
          type: number
          format: float
        asByte:
          type: string
          format: byte
        asShort:
          type: integer
          format: int32
        jsonNull:
          type: boolean
    JsonPrimitive:
      type: object
      properties:
        asBoolean:
          type: boolean
        asDouble:
          type: number
          format: double
        asString:
          type: string
        asNumber:
          type: number
        asCharacter:
          type: string
          deprecated: true
        asBigDecimal:
          type: number
        asBigInteger:
          type: integer
        boolean:
          type: boolean
        number:
          type: boolean
        asInt:
          type: integer
          format: int32
        asLong:
          type: integer
          format: int64
        string:
          type: boolean
        asFloat:
          type: number
          format: float
        asByte:
          type: string
          format: byte
        asShort:
          type: integer
          format: int32
        jsonArray:
          type: boolean
        jsonObject:
          type: boolean
        jsonPrimitive:
          type: boolean
        asJsonArray:
          $ref: '#/components/schemas/JsonArray'
        asJsonPrimitive:
          $ref: '#/components/schemas/JsonPrimitive'
        asJsonObject:
          $ref: '#/components/schemas/JsonObject'
        asJsonNull:
          $ref: '#/components/schemas/JsonNull'
        jsonNull:
          type: boolean
    Klarna:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Konbini:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Level3:
      type: object
      properties:
        customerReference:
          type: string
        lineItems:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        merchantReference:
          type: string
        shippingAddressZip:
          type: string
        shippingAmount:
          type: integer
          format: int64
        shippingFromZip:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Liability:
      type: object
      properties:
        account:
          type: string
        type:
          type: string
        accountObject:
          $ref: '#/components/schemas/Account'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    LineItem:
      type: object
      properties:
        amountDiscount:
          type: integer
          format: int64
        amountSubtotal:
          type: integer
          format: int64
        amountTax:
          type: integer
          format: int64
        amountTotal:
          type: integer
          format: int64
        currency:
          type: string
        description:
          type: string
        discounts:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        id:
          type: string
        object:
          type: string
        price:
          $ref: '#/components/schemas/Price'
        quantity:
          type: integer
          format: int64
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/Tax'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    LineItemCollection:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Link:
      type: object
      properties:
        country:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Mandate:
      type: object
      properties:
        customerAcceptance:
          $ref: '#/components/schemas/CustomerAcceptance'
        id:
          type: string
        livemode:
          type: boolean
        multiUse:
          $ref: '#/components/schemas/MultiUse'
        object:
          type: string
        onBehalfOf:
          type: string
        paymentMethod:
          type: string
        paymentMethodDetails:
          $ref: '#/components/schemas/PaymentMethodDetails'
        singleUse:
          $ref: '#/components/schemas/SingleUse'
        status:
          type: string
        type:
          type: string
        paymentMethodObject:
          $ref: '#/components/schemas/PaymentMethod'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    MandateOptions:
      type: object
      properties:
        transactionType:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Maximum:
      type: object
      properties:
        unit:
          type: string
        value:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Minimum:
      type: object
      properties:
        unit:
          type: string
        value:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    MonthlyEstimatedRevenue:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        currency:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    MultiUse:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Multibanco:
      type: object
      properties:
        entity:
          type: string
        reference:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    MxBankTransfer:
      type: object
      properties:
        reference:
          type: string
        referenceStatus:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    NextAction:
      type: object
      properties:
        displayDetails:
          $ref: '#/components/schemas/DisplayDetails'
        type:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Offline:
      type: object
      properties:
        storedAt:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Online:
      type: object
      properties:
        ipAddress:
          type: string
        userAgent:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Outcome:
      type: object
      properties:
        networkStatus:
          type: string
        reason:
          type: string
        riskLevel:
          type: string
        riskScore:
          type: integer
          format: int64
        rule:
          type: string
        sellerMessage:
          type: string
        type:
          type: string
        ruleObject:
          $ref: '#/components/schemas/Rule'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Owner:
      type: object
      properties:
        account:
          type: string
        application:
          type: string
        customer:
          type: string
        type:
          type: string
        customerObject:
          $ref: '#/components/schemas/Customer'
        applicationObject:
          $ref: '#/components/schemas/Application'
        accountObject:
          $ref: '#/components/schemas/Account'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    OwnershipDeclaration:
      type: object
      properties:
        date:
          type: integer
          format: int64
        ip:
          type: string
        userAgent:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Oxxo:
      type: object
      properties:
        number:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    P24:
      type: object
      properties:
        reference:
          type: string
        referenceStatus:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PackageDimensions:
      type: object
      properties:
        height:
          type: number
        length:
          type: number
        weight:
          type: number
        width:
          type: number
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PauseCollection:
      type: object
      properties:
        behavior:
          type: string
        resumesAt:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PaymentIntent:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        amountCapturable:
          type: integer
          format: int64
        amountDetails:
          $ref: '#/components/schemas/AmountDetails'
        amountReceived:
          type: integer
          format: int64
        application:
          type: string
        applicationFeeAmount:
          type: integer
          format: int64
        automaticPaymentMethods:
          $ref: '#/components/schemas/AutomaticPaymentMethods'
        canceledAt:
          type: integer
          format: int64
        cancellationReason:
          type: string
        captureMethod:
          type: string
        clientSecret:
          type: string
        confirmationMethod:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        customer:
          type: string
        description:
          type: string
        id:
          type: string
        invoice:
          type: string
        lastPaymentError:
          $ref: '#/components/schemas/StripeError'
        latestCharge:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        nextAction:
          $ref: '#/components/schemas/NextAction'
        object:
          type: string
        onBehalfOf:
          type: string
        paymentMethod:
          type: string
        paymentMethodConfigurationDetails:
          $ref: '#/components/schemas/PaymentMethodConfigurationDetails'
        paymentMethodOptions:
          $ref: '#/components/schemas/PaymentMethodOptions'
        paymentMethodTypes:
          type: array
          items:
            type: string
        processing:
          $ref: '#/components/schemas/Processing'
        receiptEmail:
          type: string
        review:
          type: string
        setupFutureUsage:
          type: string
        shipping:
          $ref: '#/components/schemas/ShippingDetails'
        source:
          type: string
        statementDescriptor:
          type: string
        statementDescriptorSuffix:
          type: string
        status:
          type: string
        transferData:
          $ref: '#/components/schemas/TransferData'
        transferGroup:
          type: string
        paymentMethodObject:
          $ref: '#/components/schemas/PaymentMethod'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        applicationObject:
          $ref: '#/components/schemas/Application'
        reviewObject:
          $ref: '#/components/schemas/Review'
        onBehalfOfObject:
          $ref: '#/components/schemas/Account'
        invoiceObject:
          $ref: '#/components/schemas/Invoice'
        latestChargeObject:
          $ref: '#/components/schemas/Charge'
        sourceObject:
          $ref: '#/components/schemas/PaymentSource'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PaymentMethod:
      type: object
      properties:
        acssDebit:
          $ref: '#/components/schemas/AcssDebit'
        affirm:
          $ref: '#/components/schemas/Affirm'
        afterpayClearpay:
          $ref: '#/components/schemas/AfterpayClearpay'
        alipay:
          $ref: '#/components/schemas/Alipay'
        auBecsDebit:
          $ref: '#/components/schemas/AuBecsDebit'
        bacsDebit:
          $ref: '#/components/schemas/BacsDebit'
        bancontact:
          $ref: '#/components/schemas/Bancontact'
        billingDetails:
          $ref: '#/components/schemas/BillingDetails'
        blik:
          $ref: '#/components/schemas/Blik'
        boleto:
          $ref: '#/components/schemas/Boleto'
        card:
          $ref: '#/components/schemas/Card'
        cardPresent:
          $ref: '#/components/schemas/CardPresent'
        cashapp:
          $ref: '#/components/schemas/Cashapp'
        created:
          type: integer
          format: int64
        customer:
          type: string
        customerBalance:
          $ref: '#/components/schemas/CustomerBalance'
        eps:
          $ref: '#/components/schemas/Eps'
        fpx:
          $ref: '#/components/schemas/Fpx'
        giropay:
          $ref: '#/components/schemas/Giropay'
        grabpay:
          $ref: '#/components/schemas/Grabpay'
        id:
          type: string
        ideal:
          $ref: '#/components/schemas/Ideal'
        interacPresent:
          $ref: '#/components/schemas/InteracPresent'
        klarna:
          $ref: '#/components/schemas/Klarna'
        konbini:
          $ref: '#/components/schemas/Konbini'
        link:
          $ref: '#/components/schemas/Link'
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        oxxo:
          $ref: '#/components/schemas/Oxxo'
        p24:
          $ref: '#/components/schemas/P24'
        paynow:
          $ref: '#/components/schemas/Paynow'
        paypal:
          $ref: '#/components/schemas/Paypal'
        pix:
          $ref: '#/components/schemas/Pix'
        promptpay:
          $ref: '#/components/schemas/Promptpay'
        radarOptions:
          $ref: '#/components/schemas/RadarOptions'
        revolutPay:
          $ref: '#/components/schemas/RevolutPay'
        sepaDebit:
          $ref: '#/components/schemas/SepaDebit'
        sofort:
          $ref: '#/components/schemas/Sofort'
        swish:
          $ref: '#/components/schemas/Swish'
        type:
          type: string
        usBankAccount:
          $ref: '#/components/schemas/UsBankAccount'
        wechatPay:
          $ref: '#/components/schemas/WechatPay'
        zip:
          $ref: '#/components/schemas/Zip'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PaymentMethodConfigurationDetails:
      type: object
      properties:
        id:
          type: string
        parent:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PaymentMethodDetails:
      type: object
      properties:
        achCreditTransfer:
          $ref: '#/components/schemas/AchCreditTransfer'
        achDebit:
          $ref: '#/components/schemas/AchDebit'
        acssDebit:
          $ref: '#/components/schemas/AcssDebit'
        affirm:
          $ref: '#/components/schemas/Affirm'
        afterpayClearpay:
          $ref: '#/components/schemas/AfterpayClearpay'
        alipay:
          $ref: '#/components/schemas/Alipay'
        auBecsDebit:
          $ref: '#/components/schemas/AuBecsDebit'
        bacsDebit:
          $ref: '#/components/schemas/BacsDebit'
        bancontact:
          $ref: '#/components/schemas/Bancontact'
        blik:
          $ref: '#/components/schemas/Blik'
        boleto:
          $ref: '#/components/schemas/Boleto'
        card:
          $ref: '#/components/schemas/Card'
        cardPresent:
          $ref: '#/components/schemas/CardPresent'
        cashapp:
          $ref: '#/components/schemas/Cashapp'
        customerBalance:
          $ref: '#/components/schemas/CustomerBalance'
        eps:
          $ref: '#/components/schemas/Eps'
        fpx:
          $ref: '#/components/schemas/Fpx'
        giropay:
          $ref: '#/components/schemas/Giropay'
        grabpay:
          $ref: '#/components/schemas/Grabpay'
        ideal:
          $ref: '#/components/schemas/Ideal'
        interacPresent:
          $ref: '#/components/schemas/InteracPresent'
        klarna:
          $ref: '#/components/schemas/Klarna'
        konbini:
          $ref: '#/components/schemas/Konbini'
        link:
          $ref: '#/components/schemas/Link'
        multibanco:
          $ref: '#/components/schemas/Multibanco'
        oxxo:
          $ref: '#/components/schemas/Oxxo'
        p24:
          $ref: '#/components/schemas/P24'
        paynow:
          $ref: '#/components/schemas/Paynow'
        paypal:
          $ref: '#/components/schemas/Paypal'
        pix:
          $ref: '#/components/schemas/Pix'
        promptpay:
          $ref: '#/components/schemas/Promptpay'
        revolutPay:
          $ref: '#/components/schemas/RevolutPay'
        sepaCreditTransfer:
          $ref: '#/components/schemas/SepaCreditTransfer'
        sepaDebit:
          $ref: '#/components/schemas/SepaDebit'
        sofort:
          $ref: '#/components/schemas/Sofort'
        stripeAccount:
          $ref: '#/components/schemas/StripeAccount'
        swish:
          $ref: '#/components/schemas/Swish'
        type:
          type: string
        usBankAccount:
          $ref: '#/components/schemas/UsBankAccount'
        wechat:
          $ref: '#/components/schemas/Wechat'
        wechatPay:
          $ref: '#/components/schemas/WechatPay'
        zip:
          $ref: '#/components/schemas/Zip'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PaymentMethodOptions:
      type: object
      properties:
        acssDebit:
          $ref: '#/components/schemas/AcssDebit'
        bancontact:
          $ref: '#/components/schemas/Bancontact'
        card:
          $ref: '#/components/schemas/Card'
        customerBalance:
          $ref: '#/components/schemas/CustomerBalance'
        konbini:
          $ref: '#/components/schemas/Konbini'
        usBankAccount:
          $ref: '#/components/schemas/UsBankAccount'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PaymentSettings:
      type: object
      properties:
        defaultMandate:
          type: string
        paymentMethodOptions:
          $ref: '#/components/schemas/PaymentMethodOptions'
        paymentMethodTypes:
          type: array
          items:
            type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PaymentSource:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        id:
          type: string
    PaymentSourceCollection:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/PaymentSource'
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Payments:
      type: object
      properties:
        statementDescriptor:
          type: string
        statementDescriptorKana:
          type: string
        statementDescriptorKanji:
          type: string
        statementDescriptorPrefixKana:
          type: string
        statementDescriptorPrefixKanji:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Paynow:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Payouts:
      type: object
      properties:
        debitNegativeBalances:
          type: boolean
        schedule:
          $ref: '#/components/schemas/Schedule'
        statementDescriptor:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Paypal:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Pdf:
      type: object
      properties:
        pageSize:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PendingInvoiceItemInterval:
      type: object
      properties:
        interval:
          type: string
        intervalCount:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    PendingUpdate:
      type: object
      properties:
        billingCycleAnchor:
          type: integer
          format: int64
        expiresAt:
          type: integer
          format: int64
        subscriptionItems:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionItem'
        trialEnd:
          type: integer
          format: int64
        trialFromPlan:
          type: boolean
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Period:
      type: object
      properties:
        end:
          type: integer
          format: int64
        start:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Person:
      type: object
      properties:
        account:
          type: string
        additionalTosAcceptances:
          $ref: '#/components/schemas/AdditionalTosAcceptances'
        address:
          $ref: '#/components/schemas/Address'
        addressKana:
          $ref: '#/components/schemas/AddressKana'
        addressKanji:
          $ref: '#/components/schemas/AddressKanji'
        created:
          type: integer
          format: int64
        deleted:
          type: boolean
        dob:
          $ref: '#/components/schemas/Dob'
        email:
          type: string
        firstName:
          type: string
        firstNameKana:
          type: string
        firstNameKanji:
          type: string
        fullNameAliases:
          type: array
          items:
            type: string
        futureRequirements:
          $ref: '#/components/schemas/FutureRequirements'
        gender:
          type: string
        id:
          type: string
        idNumberProvided:
          type: boolean
        idNumberSecondaryProvided:
          type: boolean
        lastName:
          type: string
        lastNameKana:
          type: string
        lastNameKanji:
          type: string
        maidenName:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        nationality:
          type: string
        object:
          type: string
        phone:
          type: string
        politicalExposure:
          type: string
        registeredAddress:
          $ref: '#/components/schemas/Address'
        relationship:
          $ref: '#/components/schemas/Relationship'
        requirements:
          $ref: '#/components/schemas/Requirements'
        ssnLast4Provided:
          type: boolean
        verification:
          $ref: '#/components/schemas/Verification'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Phase:
      type: object
      properties:
        addInvoiceItems:
          type: array
          items:
            $ref: '#/components/schemas/AddInvoiceItem'
        applicationFeePercent:
          type: number
        automaticTax:
          $ref: '#/components/schemas/AutomaticTax'
        billingCycleAnchor:
          type: string
        billingThresholds:
          $ref: '#/components/schemas/BillingThresholds'
        collectionMethod:
          type: string
        coupon:
          type: string
        currency:
          type: string
        defaultPaymentMethod:
          type: string
        defaultTaxRates:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        description:
          type: string
        endDate:
          type: integer
          format: int64
        invoiceSettings:
          $ref: '#/components/schemas/InvoiceSettings'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        metadata:
          type: object
          additionalProperties:
            type: string
        onBehalfOf:
          type: string
        prorationBehavior:
          type: string
        startDate:
          type: integer
          format: int64
        transferData:
          $ref: '#/components/schemas/TransferData'
        trialEnd:
          type: integer
          format: int64
        onBehalfOfObject:
          $ref: '#/components/schemas/Account'
        couponObject:
          $ref: '#/components/schemas/Coupon'
        defaultPaymentMethodObject:
          $ref: '#/components/schemas/PaymentMethod'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Pix:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Plan:
      type: object
      properties:
        active:
          type: boolean
        aggregateUsage:
          type: string
        amount:
          type: integer
          format: int64
        amountDecimal:
          type: number
        billingScheme:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        deleted:
          type: boolean
        id:
          type: string
        interval:
          type: string
        intervalCount:
          type: integer
          format: int64
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        nickname:
          type: string
        object:
          type: string
        product:
          type: string
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/Tier'
        tiersMode:
          type: string
        transformUsage:
          $ref: '#/components/schemas/TransformUsage'
        trialPeriodDays:
          type: integer
          format: int64
        usageType:
          type: string
        productObject:
          $ref: '#/components/schemas/Product'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Price:
      type: object
      properties:
        active:
          type: boolean
        billingScheme:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        currencyOptions:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/CurrencyOption'
        customUnitAmount:
          $ref: '#/components/schemas/CustomUnitAmount'
        deleted:
          type: boolean
        id:
          type: string
        livemode:
          type: boolean
        lookupKey:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        nickname:
          type: string
        object:
          type: string
        product:
          type: string
        recurring:
          $ref: '#/components/schemas/Recurring'
        taxBehavior:
          type: string
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/Tier'
        tiersMode:
          type: string
        transformQuantity:
          $ref: '#/components/schemas/TransformQuantity'
        type:
          type: string
        unitAmount:
          type: integer
          format: int64
        unitAmountDecimal:
          type: number
        productObject:
          $ref: '#/components/schemas/Product'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Processing:
      type: object
      properties:
        card:
          $ref: '#/components/schemas/Card'
        type:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Product:
      type: object
      properties:
        active:
          type: boolean
        created:
          type: integer
          format: int64
        defaultPrice:
          type: string
        deleted:
          type: boolean
        description:
          type: string
        features:
          type: array
          items:
            $ref: '#/components/schemas/Feature'
        id:
          type: string
        images:
          type: array
          items:
            type: string
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
        object:
          type: string
        packageDimensions:
          $ref: '#/components/schemas/PackageDimensions'
        shippable:
          type: boolean
        statementDescriptor:
          type: string
        taxCode:
          type: string
        type:
          type: string
        unitLabel:
          type: string
        updated:
          type: integer
          format: int64
        url:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        taxCodeObject:
          $ref: '#/components/schemas/TaxCode'
        defaultPriceObject:
          $ref: '#/components/schemas/Price'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Promptpay:
      type: object
      properties:
        reference:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    ProrationDetails:
      type: object
      properties:
        creditedItems:
          $ref: '#/components/schemas/CreditedItems'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Quote:
      type: object
      properties:
        amountSubtotal:
          type: integer
          format: int64
        amountTotal:
          type: integer
          format: int64
        application:
          type: string
        applicationFeeAmount:
          type: integer
          format: int64
        applicationFeePercent:
          type: number
        automaticTax:
          $ref: '#/components/schemas/AutomaticTax'
        collectionMethod:
          type: string
        computed:
          $ref: '#/components/schemas/Computed'
        created:
          type: integer
          format: int64
        currency:
          type: string
        customer:
          type: string
        defaultTaxRates:
          type: array
          items:
            type: string
        description:
          type: string
        discounts:
          type: array
          items:
            type: string
        expiresAt:
          type: integer
          format: int64
        footer:
          type: string
        fromQuote:
          $ref: '#/components/schemas/FromQuote'
        header:
          type: string
        id:
          type: string
        invoice:
          type: string
        invoiceSettings:
          $ref: '#/components/schemas/InvoiceSettings'
        lineItems:
          $ref: '#/components/schemas/LineItemCollection'
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        number:
          type: string
        object:
          type: string
        onBehalfOf:
          type: string
        status:
          type: string
        statusTransitions:
          $ref: '#/components/schemas/StatusTransitions'
        subscription:
          type: string
        subscriptionData:
          $ref: '#/components/schemas/SubscriptionData'
        subscriptionSchedule:
          type: string
        testClock:
          type: string
        totalDetails:
          $ref: '#/components/schemas/TotalDetails'
        transferData:
          $ref: '#/components/schemas/TransferData'
        defaultTaxRateObjects:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        applicationObject:
          $ref: '#/components/schemas/Application'
        testClockObject:
          $ref: '#/components/schemas/TestClock'
        onBehalfOfObject:
          $ref: '#/components/schemas/Account'
        invoiceObject:
          $ref: '#/components/schemas/Invoice'
        subscriptionObject:
          $ref: '#/components/schemas/Subscription'
        discountObjects:
          type: array
          items:
            $ref: '#/components/schemas/Discount'
        subscriptionScheduleObject:
          $ref: '#/components/schemas/SubscriptionSchedule'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    RadarOptions:
      type: object
      properties:
        session:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Receipt:
      type: object
      properties:
        accountType:
          type: string
        applicationCryptogram:
          type: string
        applicationPreferredName:
          type: string
        authorizationCode:
          type: string
        authorizationResponseCode:
          type: string
        cardholderVerificationMethod:
          type: string
        dedicatedFileName:
          type: string
        terminalVerificationResults:
          type: string
        transactionStatusInformation:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Recurring:
      type: object
      properties:
        amountSubtotal:
          type: integer
          format: int64
        amountTotal:
          type: integer
          format: int64
        interval:
          type: string
        intervalCount:
          type: integer
          format: int64
        totalDetails:
          $ref: '#/components/schemas/TotalDetails'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Refund:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        balanceTransaction:
          type: string
        charge:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        description:
          type: string
        destinationDetails:
          $ref: '#/components/schemas/DestinationDetails'
        failureBalanceTransaction:
          type: string
        failureReason:
          type: string
        id:
          type: string
        instructionsEmail:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        nextAction:
          $ref: '#/components/schemas/NextAction'
        object:
          type: string
        paymentIntent:
          type: string
        reason:
          type: string
        receiptNumber:
          type: string
        sourceTransferReversal:
          type: string
        status:
          type: string
        transferReversal:
          type: string
        chargeObject:
          $ref: '#/components/schemas/Charge'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        testHelpers:
          $ref: '#/components/schemas/TestHelpers'
        paymentIntentObject:
          $ref: '#/components/schemas/PaymentIntent'
        transferReversalObject:
          $ref: '#/components/schemas/TransferReversal'
        sourceTransferReversalObject:
          $ref: '#/components/schemas/TransferReversal'
        balanceTransactionObject:
          $ref: '#/components/schemas/BalanceTransaction'
        failureBalanceTransactionObject:
          $ref: '#/components/schemas/BalanceTransaction'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    RefundCollection:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Refund'
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Relationship:
      type: object
      properties:
        director:
          type: boolean
        executive:
          type: boolean
        legalGuardian:
          type: boolean
        owner:
          type: boolean
        percentOwnership:
          type: number
        representative:
          type: boolean
        title:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Rendering:
      type: object
      properties:
        amountTaxDisplay:
          type: string
        pdf:
          $ref: '#/components/schemas/Pdf'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    RenderingOptions:
      type: object
      properties:
        amountTaxDisplay:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    RequestOptions:
      type: object
      properties:
        apiKey:
          type: string
        clientId:
          type: string
        idempotencyKey:
          type: string
        stripeAccount:
          type: string
        baseUrl:
          type: string
        stripeVersion:
          type: string
        connectTimeout:
          type: integer
          format: int32
        readTimeout:
          type: integer
          format: int32
        maxNetworkRetries:
          type: integer
          format: int32
        connectionProxy:
          type: object
        proxyCredential:
          type: object
          properties:
            userName:
              type: string
            password:
              type: array
              items:
                type: string
    Requirements:
      type: object
      properties:
        alternatives:
          type: array
          items:
            $ref: '#/components/schemas/Alternative'
        currentDeadline:
          type: integer
          format: int64
        currentlyDue:
          type: array
          items:
            type: string
        disabledReason:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Errors'
        eventuallyDue:
          type: array
          items:
            type: string
        pastDue:
          type: array
          items:
            type: string
        pendingVerification:
          type: array
          items:
            type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Review:
      type: object
      properties:
        billingZip:
          type: string
        charge:
          type: string
        closedReason:
          type: string
        created:
          type: integer
          format: int64
        id:
          type: string
        ipAddress:
          type: string
        ipAddressLocation:
          $ref: '#/components/schemas/IpAddressLocation'
        livemode:
          type: boolean
        object:
          type: string
        open:
          type: boolean
        openedReason:
          type: string
        paymentIntent:
          type: string
        reason:
          type: string
        session:
          $ref: '#/components/schemas/Session'
        chargeObject:
          $ref: '#/components/schemas/Charge'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        paymentIntentObject:
          $ref: '#/components/schemas/PaymentIntent'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Revolut:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    RevolutPay:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Rule:
      type: object
      properties:
        action:
          type: string
        id:
          type: string
        predicate:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Schedule:
      type: object
      properties:
        delayDays:
          type: integer
          format: int64
        interval:
          type: string
        monthlyAnchor:
          type: integer
          format: int64
        weeklyAnchor:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SepaCreditTransfer:
      type: object
      properties:
        bankName:
          type: string
        bic:
          type: string
        iban:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SepaDebit:
      type: object
      properties:
        bankCode:
          type: string
        branchCode:
          type: string
        country:
          type: string
        fingerprint:
          type: string
        generatedFrom:
          $ref: '#/components/schemas/GeneratedFrom'
        last4:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SepaDebitPayments:
      type: object
      properties:
        creditorId:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Session:
      type: object
      properties:
        browser:
          type: string
        device:
          type: string
        platform:
          type: string
        version:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Settings:
      type: object
      properties:
        bacsDebitPayments:
          $ref: '#/components/schemas/BacsDebitPayments'
        branding:
          $ref: '#/components/schemas/Branding'
        cardIssuing:
          $ref: '#/components/schemas/CardIssuing'
        cardPayments:
          $ref: '#/components/schemas/CardPayments'
        dashboard:
          $ref: '#/components/schemas/Dashboard'
        invoices:
          $ref: '#/components/schemas/Invoices'
        payments:
          $ref: '#/components/schemas/Payments'
        payouts:
          $ref: '#/components/schemas/Payouts'
        sepaDebitPayments:
          $ref: '#/components/schemas/SepaDebitPayments'
        treasury:
          $ref: '#/components/schemas/Treasury'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SetupAttempt:
      type: object
      properties:
        application:
          type: string
        attachToSelf:
          type: boolean
        created:
          type: integer
          format: int64
        customer:
          type: string
        flowDirections:
          type: array
          items:
            type: string
        id:
          type: string
        livemode:
          type: boolean
        object:
          type: string
        onBehalfOf:
          type: string
        paymentMethod:
          type: string
        paymentMethodDetails:
          $ref: '#/components/schemas/PaymentMethodDetails'
        setupError:
          $ref: '#/components/schemas/StripeError'
        setupIntent:
          type: string
        status:
          type: string
        usage:
          type: string
        paymentMethodObject:
          $ref: '#/components/schemas/PaymentMethod'
        setupIntentObject:
          $ref: '#/components/schemas/SetupIntent'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        applicationObject:
          $ref: '#/components/schemas/Application'
        onBehalfOfObject:
          $ref: '#/components/schemas/Account'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SetupIntent:
      type: object
      properties:
        application:
          type: string
        attachToSelf:
          type: boolean
        automaticPaymentMethods:
          $ref: '#/components/schemas/AutomaticPaymentMethods'
        cancellationReason:
          type: string
        clientSecret:
          type: string
        created:
          type: integer
          format: int64
        customer:
          type: string
        description:
          type: string
        flowDirections:
          type: array
          items:
            type: string
        id:
          type: string
        lastSetupError:
          $ref: '#/components/schemas/StripeError'
        latestAttempt:
          type: string
        livemode:
          type: boolean
        mandate:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        nextAction:
          $ref: '#/components/schemas/NextAction'
        object:
          type: string
        onBehalfOf:
          type: string
        paymentMethod:
          type: string
        paymentMethodConfigurationDetails:
          $ref: '#/components/schemas/PaymentMethodConfigurationDetails'
        paymentMethodOptions:
          $ref: '#/components/schemas/PaymentMethodOptions'
        paymentMethodTypes:
          type: array
          items:
            type: string
        singleUseMandate:
          type: string
        status:
          type: string
        usage:
          type: string
        paymentMethodObject:
          $ref: '#/components/schemas/PaymentMethod'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        applicationObject:
          $ref: '#/components/schemas/Application'
        onBehalfOfObject:
          $ref: '#/components/schemas/Account'
        latestAttemptObject:
          $ref: '#/components/schemas/SetupAttempt'
        mandateObject:
          $ref: '#/components/schemas/Mandate'
        singleUseMandateObject:
          $ref: '#/components/schemas/Mandate'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    ShippingCost:
      type: object
      properties:
        amountSubtotal:
          type: integer
          format: int64
        amountTax:
          type: integer
          format: int64
        amountTotal:
          type: integer
          format: int64
        shippingRate:
          type: string
        taxes:
          type: array
          items:
            $ref: '#/components/schemas/Tax'
        shippingRateObject:
          $ref: '#/components/schemas/ShippingRate'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    ShippingDetails:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/Address'
        carrier:
          type: string
        name:
          type: string
        phone:
          type: string
        trackingNumber:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    ShippingRate:
      type: object
      properties:
        active:
          type: boolean
        created:
          type: integer
          format: int64
        deliveryEstimate:
          $ref: '#/components/schemas/DeliveryEstimate'
        displayName:
          type: string
        fixedAmount:
          $ref: '#/components/schemas/FixedAmount'
        id:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        taxBehavior:
          type: string
        taxCode:
          type: string
        type:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        taxCodeObject:
          $ref: '#/components/schemas/TaxCode'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SingleUse:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        currency:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Sofort:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    StatusTransitions:
      type: object
      properties:
        acceptedAt:
          type: integer
          format: int64
        canceledAt:
          type: integer
          format: int64
        finalizedAt:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    StripeAccount:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    StripeError:
      type: object
      properties:
        charge:
          type: string
        code:
          type: string
        declineCode:
          type: string
        docUrl:
          type: string
        message:
          type: string
        param:
          type: string
        paymentIntent:
          $ref: '#/components/schemas/PaymentIntent'
        paymentMethod:
          $ref: '#/components/schemas/PaymentMethod'
        paymentMethodType:
          type: string
        requestLogUrl:
          type: string
        setupIntent:
          $ref: '#/components/schemas/SetupIntent'
        source:
          $ref: '#/components/schemas/PaymentSource'
        type:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    StripeResponse:
      type: object
    StripeResponseGetter:
      type: object
    Subscription:
      type: object
      properties:
        application:
          type: string
        applicationFeePercent:
          type: number
        automaticTax:
          $ref: '#/components/schemas/AutomaticTax'
        billingCycleAnchor:
          type: integer
          format: int64
        billingCycleAnchorConfig:
          $ref: '#/components/schemas/BillingCycleAnchorConfig'
        billingThresholds:
          $ref: '#/components/schemas/BillingThresholds'
        cancelAt:
          type: integer
          format: int64
        cancelAtPeriodEnd:
          type: boolean
        canceledAt:
          type: integer
          format: int64
        cancellationDetails:
          $ref: '#/components/schemas/CancellationDetails'
        collectionMethod:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        currentPeriodEnd:
          type: integer
          format: int64
        currentPeriodStart:
          type: integer
          format: int64
        customer:
          type: string
        daysUntilDue:
          type: integer
          format: int64
        defaultPaymentMethod:
          type: string
        defaultSource:
          type: string
        defaultTaxRates:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        description:
          type: string
        discount:
          $ref: '#/components/schemas/Discount'
        endedAt:
          type: integer
          format: int64
        id:
          type: string
        items:
          $ref: '#/components/schemas/SubscriptionItemCollection'
        latestInvoice:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        nextPendingInvoiceItemInvoice:
          type: integer
          format: int64
        object:
          type: string
        onBehalfOf:
          type: string
        pauseCollection:
          $ref: '#/components/schemas/PauseCollection'
        paymentSettings:
          $ref: '#/components/schemas/PaymentSettings'
        pendingInvoiceItemInterval:
          $ref: '#/components/schemas/PendingInvoiceItemInterval'
        pendingSetupIntent:
          type: string
        pendingUpdate:
          $ref: '#/components/schemas/PendingUpdate'
        schedule:
          type: string
        startDate:
          type: integer
          format: int64
        status:
          type: string
        testClock:
          type: string
        transferData:
          $ref: '#/components/schemas/TransferData'
        trialEnd:
          type: integer
          format: int64
        trialSettings:
          $ref: '#/components/schemas/TrialSettings'
        trialStart:
          type: integer
          format: int64
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        applicationObject:
          $ref: '#/components/schemas/Application'
        defaultSourceObject:
          $ref: '#/components/schemas/PaymentSource'
        testClockObject:
          $ref: '#/components/schemas/TestClock'
        latestInvoiceObject:
          $ref: '#/components/schemas/Invoice'
        onBehalfOfObject:
          $ref: '#/components/schemas/Account'
        scheduleObject:
          $ref: '#/components/schemas/SubscriptionSchedule'
        defaultPaymentMethodObject:
          $ref: '#/components/schemas/PaymentMethod'
        pendingSetupIntentObject:
          $ref: '#/components/schemas/SetupIntent'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SubscriptionCollection:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SubscriptionData:
      type: object
      properties:
        description:
          type: string
        effectiveDate:
          type: integer
          format: int64
        metadata:
          type: object
          additionalProperties:
            type: string
        trialPeriodDays:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SubscriptionDetails:
      type: object
      properties:
        metadata:
          type: object
          additionalProperties:
            type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SubscriptionItem:
      type: object
      properties:
        billingThresholds:
          $ref: '#/components/schemas/BillingThresholds'
        created:
          type: integer
          format: int64
        deleted:
          type: boolean
        id:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        plan:
          $ref: '#/components/schemas/Plan'
        price:
          $ref: '#/components/schemas/Price'
        quantity:
          type: integer
          format: int64
        subscription:
          type: string
        taxRates:
          type: array
          items:
            $ref: '#/components/schemas/TaxRate'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SubscriptionItemCollection:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionItem'
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    SubscriptionSchedule:
      type: object
      properties:
        application:
          type: string
        canceledAt:
          type: integer
          format: int64
        completedAt:
          type: integer
          format: int64
        created:
          type: integer
          format: int64
        currentPhase:
          $ref: '#/components/schemas/CurrentPhase'
        customer:
          type: string
        defaultSettings:
          $ref: '#/components/schemas/DefaultSettings'
        endBehavior:
          type: string
        id:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        phases:
          type: array
          items:
            $ref: '#/components/schemas/Phase'
        releasedAt:
          type: integer
          format: int64
        releasedSubscription:
          type: string
        status:
          type: string
        subscription:
          type: string
        testClock:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        applicationObject:
          $ref: '#/components/schemas/Application'
        testClockObject:
          $ref: '#/components/schemas/TestClock'
        subscriptionObject:
          $ref: '#/components/schemas/Subscription'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Swish:
      type: object
      properties:
        reference:
          type: string
        referenceStatus:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Tax:
      type: object
      properties:
        automaticTax:
          type: string
        ipAddress:
          type: string
        location:
          $ref: '#/components/schemas/Location'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TaxAmount:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        inclusive:
          type: boolean
        taxRate:
          type: string
        taxabilityReason:
          type: string
        taxableAmount:
          type: integer
          format: int64
        taxRateObject:
          $ref: '#/components/schemas/TaxRate'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TaxCode:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        object:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TaxId:
      type: object
      properties:
        country:
          type: string
        created:
          type: integer
          format: int64
        customer:
          type: string
        deleted:
          type: boolean
        id:
          type: string
        livemode:
          type: boolean
        object:
          type: string
        owner:
          $ref: '#/components/schemas/Owner'
        type:
          type: string
        value:
          type: string
        verification:
          $ref: '#/components/schemas/Verification'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        customerObject:
          $ref: '#/components/schemas/Customer'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TaxIdCollection:
      type: object
      properties:
        object:
          type: string
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TaxRate:
      type: object
      properties:
        active:
          type: boolean
        country:
          type: string
        created:
          type: integer
          format: int64
        description:
          type: string
        displayName:
          type: string
        effectivePercentage:
          type: number
        id:
          type: string
        inclusive:
          type: boolean
        jurisdiction:
          type: string
        jurisdictionLevel:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        percentage:
          type: number
        state:
          type: string
        taxType:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TestClock:
      type: object
      properties:
        created:
          type: integer
          format: int64
        deleted:
          type: boolean
        deletesAfter:
          type: integer
          format: int64
        frozenTime:
          type: integer
          format: int64
        id:
          type: string
        livemode:
          type: boolean
        name:
          type: string
        object:
          type: string
        status:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TestHelpers:
      type: object
    ThBankTransfer:
      type: object
      properties:
        reference:
          type: string
        referenceStatus:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    ThresholdReason:
      type: object
      properties:
        amountGte:
          type: integer
          format: int64
        itemReasons:
          type: array
          items:
            $ref: '#/components/schemas/ItemReason'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Tier:
      type: object
      properties:
        flatAmount:
          type: integer
          format: int64
        flatAmountDecimal:
          type: number
        unitAmount:
          type: integer
          format: int64
        unitAmountDecimal:
          type: number
        upTo:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Tip:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TosAcceptance:
      type: object
      properties:
        date:
          type: integer
          format: int64
        ip:
          type: string
        userAgent:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TotalDetails:
      type: object
      properties:
        amountDiscount:
          type: integer
          format: int64
        amountShipping:
          type: integer
          format: int64
        amountTax:
          type: integer
          format: int64
        breakdown:
          $ref: '#/components/schemas/Breakdown'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TotalDiscountAmount:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        discount:
          type: string
        discountObject:
          $ref: '#/components/schemas/Discount'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TotalTaxAmount:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        inclusive:
          type: boolean
        taxRate:
          type: string
        taxabilityReason:
          type: string
        taxableAmount:
          type: integer
          format: int64
        taxRateObject:
          $ref: '#/components/schemas/TaxRate'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Transfer:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        amountReversed:
          type: integer
          format: int64
        balanceTransaction:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        description:
          type: string
        destination:
          type: string
        destinationPayment:
          type: string
        id:
          type: string
        livemode:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        reversals:
          $ref: '#/components/schemas/TransferReversalCollection'
        reversed:
          type: boolean
        sourceTransaction:
          type: string
        sourceType:
          type: string
        transferGroup:
          type: string
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        sourceTransactionObject:
          $ref: '#/components/schemas/Charge'
        destinationObject:
          $ref: '#/components/schemas/Account'
        destinationPaymentObject:
          $ref: '#/components/schemas/Charge'
        balanceTransactionObject:
          $ref: '#/components/schemas/BalanceTransaction'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TransferData:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        destination:
          type: string
        destinationObject:
          $ref: '#/components/schemas/Account'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TransferReversal:
      type: object
      properties:
        amount:
          type: integer
          format: int64
        balanceTransaction:
          type: string
        created:
          type: integer
          format: int64
        currency:
          type: string
        destinationPaymentRefund:
          type: string
        id:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        object:
          type: string
        sourceRefund:
          type: string
        transfer:
          type: string
        sourceRefundObject:
          $ref: '#/components/schemas/Refund'
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        transferObject:
          $ref: '#/components/schemas/Transfer'
        balanceTransactionObject:
          $ref: '#/components/schemas/BalanceTransaction'
        destinationPaymentRefundObject:
          $ref: '#/components/schemas/Refund'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TransferReversalCollection:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/TransferReversal'
        hasMore:
          type: boolean
        url:
          type: string
        requestParams:
          type: object
          additionalProperties:
            type: object
        responseGetter:
          $ref: '#/components/schemas/StripeResponseGetter'
        requestOptions:
          $ref: '#/components/schemas/RequestOptions'
        pageTypeToken:
          type: object
          properties:
            typeName:
              type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TransformQuantity:
      type: object
      properties:
        divideBy:
          type: integer
          format: int64
        round:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TransformUsage:
      type: object
      properties:
        divideBy:
          type: integer
          format: int64
        round:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Treasury:
      type: object
      properties:
        tosAcceptance:
          $ref: '#/components/schemas/TosAcceptance'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TrialSettings:
      type: object
      properties:
        endBehavior:
          $ref: '#/components/schemas/EndBehavior'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Upfront:
      type: object
      properties:
        amountSubtotal:
          type: integer
          format: int64
        amountTotal:
          type: integer
          format: int64
        lineItems:
          $ref: '#/components/schemas/LineItemCollection'
        totalDetails:
          $ref: '#/components/schemas/TotalDetails'
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    UsBankAccount:
      type: object
      properties:
        financialConnections:
          $ref: '#/components/schemas/FinancialConnections'
        verificationMethod:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    UsBankTransfer:
      type: object
      properties:
        reference:
          type: string
        referenceStatus:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Verification:
      type: object
      properties:
        status:
          type: string
        verifiedAddress:
          type: string
        verifiedName:
          type: string
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Wechat:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    WechatPay:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    Zip:
      type: object
      properties:
        lastResponse:
          $ref: '#/components/schemas/StripeResponse'
        rawJsonObject:
          $ref: '#/components/schemas/JsonObject'
    TicketResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    LocationResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    LocationPostDTO:
      required:
      - address
      - city
      - nation
      - zipCode
      type: object
      properties:
        address:
          type: string
        city:
          type: string
        zipCode:
          type: integer
          format: int32
        nation:
          type: string
        userId:
          type: string
          format: uuid
    GalleryDTO:
      type: object
      properties:
        artistUuid:
          type: string
          format: uuid
    GalleryResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    ExhibitionResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    EventResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    CommentDTO:
      required:
      - rate
      - text
      type: object
      properties:
        rate:
          type: integer
          format: int32
        text:
          type: string
        blog:
          type: string
          format: uuid
        user:
          type: string
          format: uuid
        comment:
          type: string
          format: uuid
    CommentResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    BlogResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    UserResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    UserLoginDTO:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    UserLoginResponseDTO:
      type: object
      properties:
        token:
          type: string
        role:
          type: string
    ArtistResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    ArtistWorkResponseDTO:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
    PageUser:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/User'
        first:
          type: boolean
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    PageTicket:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        first:
          type: boolean
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageLocation:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Location'
        first:
          type: boolean
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageGallery:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Gallery'
        first:
          type: boolean
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageExhibition:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Exhibition'
        first:
          type: boolean
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageEvent:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        first:
          type: boolean
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageComment:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        first:
          type: boolean
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageBlog:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Blog'
        first:
          type: boolean
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageArtist:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        first:
          type: boolean
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageArtistWork:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        number:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ArtistWork'
        first:
          type: boolean
        last:
          type: boolean
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
